{
	"info": {
		"_postman_id": "698d8515-8a67-461d-9353-9eca272a6a8b",
		"name": "GorestAPI-Chaining",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23777674"
	},
	"item": [
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=JSON.parse(responseBody);",
							"pm.environment.set(\"userId_env\",jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var userInfo = Math.random().toString(10).substring(2);\r",
							"\r",
							"var userName = \"obeke\"+userInfo;\r",
							"\r",
							"var userEmail = \"obeke\"+userInfo+\"@\"+\"gmail.com\";\r",
							"\r",
							"pm.environment.set(\"userName_env\",userName);\r",
							"\r",
							"pm.environment.set(\"userEmail_env\",userEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{userName_env}}\",\n    \"gender\":\"male\",\n    \"email\":\"{{userEmail_env}}\",\n    \"status\":\"inactive\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Valisating json fields in the response",
							"pm.test(\"Valisating json fields in the response\",()=>{",
							"",
							"    var jsonData=pm.response.json();",
							"    // Validate if the response id is equal to environment variable id",
							"    pm.expect(jsonData.id).to.be.eq(pm.environment.get(\"userId_env\"));",
							"    // Validate if the response name is equal to environment variable name",
							"    pm.expect(jsonData.name).to.be.eq(pm.environment.get(\"userName_env\"));",
							"    // Validate if the response email is equal to environment variable email",
							"    pm.expect(jsonData.email).to.be.eq(pm.environment.get(\"userEmail_env\"));",
							"    ",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/v2/users/{{userId_env}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId_env}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var userInfo = Math.random().toString(10).substring(2);\r",
							"\r",
							"var userName = \"obeke\"+userInfo;\r",
							"\r",
							"var userEmail = \"obeke\"+userInfo+\"@\"+\"gmail.com\";\r",
							"\r",
							"pm.environment.set(\"userName_env\",userName);\r",
							"\r",
							"pm.environment.set(\"userEmail_env\",userEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{userName_env}}\",\n    \"gender\":\"male\",\n    \"email\":\"{{userEmail_env}}\",\n    \"status\":\"active\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users/{{userId_env}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId_env}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Unset the environment variables after deletion test",
							"pm.environment.unset(\"userId_env\");",
							"",
							"pm.environment.unset(\"userName_env\");",
							"",
							"pm.environment.unset(\"userEmail_env\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users/{{userId_env}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId_env}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "198116e5c935fb9002f1c9daba77f79cddffcb5e7bc46770d99cd973320f45dd",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://gorest.co.in/",
			"type": "string"
		}
	]
}